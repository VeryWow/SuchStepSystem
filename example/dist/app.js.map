{"version":3,"sources":["node_modules/browser-pack/_prelude.js","classes/Step.js","classes/StepSystem.js","example/app.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export class Step {\n  constructor (params) {\n    this.parent = params.parent || null\n    this.name = params.name\n    this.next = params.next\n    this.methods = params.methods || {}\n    this.template = params.template || ''\n    this.ignore_progress = params.ignore_progress || false\n    this.hide_progress = params.hide_progress || false\n    this.from = null\n    this.required = params.required || false\n    this._data = params.data || {}\n    params.interceptors = params.interceptors || {}\n    this.interceptors = {\n      isSkip: params.interceptors.isSkip || this.methods.isSkip || function () {\n        return false\n      },\n      beforeRender: params.interceptors.beforeRender || this.methods.beforeRender || function () {\n        return {status: true}\n      },\n      beforeNext: params.interceptors.beforeNext || this.methods.beforeNext || function () {\n        return {status: true}\n      },\n      beforeBack: params.interceptors.beforeBack || this.methods.beforeBack || function () {\n        return {status: true}\n      }\n    }\n  }\n\n  /* LINKS */\n  get goNext () { return this.parent.goNext }\n  get goBack () { return this.parent.goBack }\n  get goToStep () { return this.parent.goToStep }\n\n  get data () {\n    return this._data\n  }\n\n  get container () {\n    return this.parent.container.find(this.parent._step_container)\n  }\n\n  call (method, ...args) {\n    let fnc = this.methods[method] || this.interceptors[method]\n    if (fnc) {\n      return fnc.apply(this, args)\n    }\n  }\n}\n","/**\n * StepSystem v1.0.1\n * Last update: 25.05.2017\n *\n * Dependencies: jQuery\n *\n * @author kaskar2008\n */\n\nexport class StepSystem {\n  /**\n   * @param  {jQuery element} container\n   */\n  constructor (params) {\n    this._steps = {}\n    this._current_step = null\n    this._container = params.container || $('.step-system')\n    this._step_container = params.step_class || '.step'\n    this._next_timeout = null\n    this.steps_past = []\n    this.progress = 0\n    this.commonHandlers = function () {}\n    this.onFinish = function () {}\n    this.onProgress = function () {}\n    this.onStepRender = function () {}\n\n    this._global_interceptors = {\n      isSkipGlobal: function (step) {\n        return step.interceptors.isSkip(step)\n      },\n      beforeNext: function (step) {\n        return new Promise((resolve) => {\n          resolve()\n        })\n      },\n      beforeBack: function (step) {\n        return new Promise((resolve) => {\n          resolve()\n        })\n      }\n    }\n  }\n\n  /**\n   * Add new step\n   * @param {Step} step\n   */\n  addStep (step) {\n    step.parent = this\n    this._steps[step.name] = step\n    return this\n  }\n\n  setGlobalInterceptors (interceptors) {\n    this._global_interceptors = Object.assign(this._global_interceptors, interceptors)\n    return this\n  }\n\n  setHandlers (cb) {\n    this.commonHandlers = cb\n    return this\n  }\n\n  get global_interceptors () {\n    return this._global_interceptors\n  }\n\n  get current_step () {\n    return this.step(this._current_step) || null\n  }\n\n  step (name) {\n    return this._steps[name]\n  }\n\n  get container () {\n    return this._container\n  }\n\n  get steps () {\n    return this._steps\n  }\n\n  get all_data () {\n    return this.collectData()\n  }\n\n  render (step) {\n    let _br = step.call('beforeRender', step)\n    if (!_br.status) {\n      if (_br.onError) _br.onError.apply(step)\n      return this\n    }\n    this.container.find(this._step_container).html(step.template || this._container.find(`#${step.name}`).html())\n    this.container.find(this._step_container).attr('data-name', step.name)\n    this.onStepRender(step)\n    step.call('onRender', step)\n  }\n\n  updateProgress () {\n    let future_steps = 0\n    let iteration_step = this.current_step\n    let iteration_next_step = iteration_step.next\n    while (iteration_next_step) {\n      if (!iteration_step.ignore_progress) {\n        future_steps++\n      }\n      iteration_step = this.step(iteration_next_step)\n      iteration_next_step = iteration_step.next\n    }\n    this.progress = (this.steps_past.length * 100) / (this.steps_past.length + future_steps)\n    this.onProgress(this.progress)\n  }\n\n  goNextTimeout (timeout = 300) {\n    const $this = this\n    clearTimeout(this._next_timeout)\n    this._next_timeout = setTimeout(function () {\n      $this.goNext()\n    }, timeout)\n  }\n\n  goNext () {\n    let curr_step = this.current_step || {}\n    this.global_interceptors.beforeNext(curr_step)\n      .then(() => {\n        let _bn = curr_step.call('beforeNext', curr_step)\n        if (!_bn.status) {\n          if (_bn.onError) {\n            _bn.onError.apply(curr_step)\n          }\n          return\n        }\n        let next_step = curr_step.next || null\n        if (next_step) {\n          this.goToStep(this.step(next_step), { from: curr_step.name })\n        } else {\n          if (this.onFinish) {\n            this.onFinish()\n          }\n        }\n      })\n      .catch(() => { })\n    return this\n  }\n\n  goBack () {\n    let curr_step = this.current_step || {}\n    this.global_interceptors.beforeBack(curr_step)\n      .then(() => {\n        let prev_step = curr_step.from || null\n        let _bb = curr_step.call('beforeBack', curr_step) || { status: false }\n        if (!_bb.status) {\n          if (_bb.onError) _bb.onError.apply(curr_step)\n          return\n        }\n        if (prev_step) {\n          if (_bb.status) {\n            this.steps_past.pop()\n          }\n          this.goToStep(this.step(prev_step), { is_back: true })\n        }\n      })\n      .catch(() => {})\n    return this\n  }\n\n  goToStep (step, params = {}) {\n    let is_skip = this.global_interceptors.isSkipGlobal(step) || step.call('isSkip', step)\n    if (is_skip) {\n      step = this.step(step.next)\n    }\n    let from = params.from || null\n    let is_back = params.is_back || false\n    if (from) {\n      step.from = from\n    }\n    this.render(step)\n    this._current_step = step.name\n    if (this.steps_past.indexOf(step.name) < 0) {\n      this.steps_past.push(step.name)\n    }\n    this.updateProgress()\n    return this\n  }\n\n  collectData () {\n    let data = {}\n    for (var step in this.steps) {\n      if (this.step(step).data) {\n        data[step] = this.step(step).data\n      }\n    }\n    return data\n  }\n\n  init (first_step) {\n    this.first_step = first_step\n    this.commonHandlers()\n    this._current_step = this.first_step\n    this.goToStep(this.step(this._current_step))\n  }\n}\n","import { Step } from '../classes/Step'\nimport { StepSystem } from '../classes/StepSystem'\n\nwindow.app = new StepSystem({\n  container: $('.container'),\n  step_class: '.step'\n});\n\n(function (app) {\n\n  const first_step = 'first-step'\n\n  app\n  /**\n   * COMMON HANDLERS\n   */\n  .setHandlers(() => {\n    console.log('handlers init')\n\n  })\n  \n  /**\n   * FIRST STEP\n   */\n  .addStep(new Step({\n    name: 'first-step',\n    next: 'second-step',\n    methods: {\n      beforeRender: (step) => {\n        console.log('first-step beforeRender')\n        return { status: true }\n      },\n      beforeNext: (step) => {\n        console.log('first-step beforeNext', this)\n        step.data.lol = 'lol'\n        return { status: true }\n      },\n      onRender: (step) => {\n        app.container.find('.step').css({'color': 'green'})\n      }\n    }\n  }))\n\n  /**\n   * SECOND STEP\n   */\n  .addStep(new Step({\n    name: 'second-step',\n    next: 'third-step',\n    methods: {\n      isSkip: (step) => {\n        return app.step('first-step').data.lol == 'lol'\n      },\n      beforeRender: (step) => {\n        console.log('second-step beforeRender')\n        return { status: true }\n      },\n      beforeNext: (step) => {\n        console.log('second-step beforeNext')\n        step.data.azaza = 'azaza'\n        return { status: true }\n      },\n      onRender: (step) => {\n        app.container.find('.step').css({'color': 'red'})\n      }\n    }\n  }))\n\n  /**\n   * THIRD STEP\n   */\n  .addStep(new Step({\n    name: 'third-step',\n    methods: {\n      beforeRender: (step) => {\n        console.log('third-step beforeRender')\n        return { status: true }\n      },\n      beforeNext: (step) => {\n        console.log('third-step beforeNext')\n        step.data.kek = 'kek'\n        return { status: true }\n      },\n      onRender: (step) => {\n        app.container.find('.step').css({'color': 'blue'})\n      }\n    }\n  }))\n\n  /**\n   * FINISH\n   */\n  .addStep(new Step({\n    name: 'finish',\n    hide_progress: true,\n    ignore_progress: true,\n    methods: {\n      beforeRender: (step) => {\n        console.log('finish beforeRender')\n        return { status: true }\n      },\n      beforeNext: (step) => {\n        console.log('finish beforeNext')\n        step.data.kek = 'kek'\n        return { status: true }\n      },\n      onRender: (step) => {\n        step.call('anyOfInternalMethods')\n      },\n      anyOfInternalMethods: () => {\n        alert ('Hey there')\n      }\n    }\n  }))\n\n  /**\n   * GLOBAL\n   */\n\n  app.onFinish = () => {\n    app.goToStep(app.step('finish'))\n    console.log(app.collectData())\n  }\n\n  app.onProgress = (progress) => {\n    app.container.find('.progress').html(Math.floor(progress) + '%')\n  }\n\n  app.onStepRender = (step) => {\n    app.container.find('.step .next').click(function () {\n      app.goNext()\n    })\n    app.container.find('.step .back').click(function () {\n      app.goBack()\n    })\n\n    console.log(step)\n\n    if (step.hide_progress) {\n      app.container.find('.progress').hide()\n    } else {\n      app.container.find('.progress').show()\n    }\n  }\n\n  app.init(first_step)\n\n})(window.app)\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}